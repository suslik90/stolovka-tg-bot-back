const express = require('express');
const cors = require('cors');
require('dotenv').config();
const https = require('https');
const fs = require('fs');

const { DateTime } = require("luxon");

const { GoogleSpreadsheet } = require('google-spreadsheet');
const doc = new GoogleSpreadsheet(process.env.GOOGLE_SHEET_ID);
const creds = require('./menu/creds.json');
doc.useServiceAccountAuth(creds);

const mailService = require('./mailService');

const TelegramBot = require('node-telegram-bot-api');

const ExcelJS = require('exceljs');
const filePath = process.env.MENU_FILE_PATH;
const worksheetName = process.env.MENU_WORKSHEET_NAME;

const token = process.env.TELEGRAM_BOT_TOKEN;

const bot = new TelegramBot(token, { polling: true });
const webAppURL = process.env.WEBAPP_URL;

const app = express();

app.use(express.json());
app.use(cors());

const MENU_START_ROW = 2;

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.chat?.first_name;
    const text = msg.text;

    if (text === '/start') {
        const helloMessage = `–ü—Ä–∏–≤–µ—Ç, ${username}! –ú—ã —Ä–∞–¥—ã, –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —É –Ω–∞—Å –≤ –≥–æ—Å—Ç—è—Ö!\n\n–û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–µ–Ω—é –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é ‚Üô`;
        await bot.sendMessage(chatId, helloMessage, {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "–ú–µ–Ω—é –∏–Ω–ª–∞–π–Ω", web_app: { url: webAppURL } }]
                ]
            }
        });
    }
});

app.get('/menu', async (req, res) => {

    let menuMeals = [];
    let catogoriesArray = [];

    try {
        await doc.loadInfo();
        const sheet = doc.sheetsByTitle[worksheetName];
        const rows = await sheet.getRows();
        for (const [key, row] of Object.entries(rows)) {
            const mealCategory = row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'];
            if (!catogoriesArray.includes(mealCategory)) catogoriesArray.push(mealCategory);
            const imageChunks = row['–§–æ—Ç–æ']!= undefined ? row['–§–æ—Ç–æ'].split("/") : [];
            const imageFileId = imageChunks.length > 5 ? imageChunks[5] : "";
            const binaryUrl = imageFileId.length > 0 ? `https://drive.google.com/uc?id=${imageFileId}`:"";
            menuMeals.push({
                name: row['–ë–ª—é–¥–æ'],
                description: row['–û–ø–∏—Å–∞–Ω–∏–µ'],
                category: mealCategory,
                price: row['–¶–µ–Ω–∞'],
                image: "",
                binaryUrl: binaryUrl
            });

        }
        let groupedMeals = catogoriesArray.map((categoryName) => {
            const mealsByCategory = menuMeals.filter((menuItem) => menuItem.category == categoryName);
            return { category: categoryName, meals: mealsByCategory };
        });

        const menu = {
            "menu": groupedMeals
        };
        res.status(200).json(menu);
    } catch (e) {
        console.log("Error parse menu", e);
        res.status(500).json({ "errorName": e.name, "errorMessage": e.message });
    }
});

app.post('/order', async (req, res) => {

    const data = req.body;
    const queryId = data.queryId;

    try {
        const subject = process.env.ADMIN_EMAIL_SUBJECT;
        const emailTemplateName = process.env.ADMIN_EMAIL_TEMPLATE;
        const paymentIsCash = data.delivery.payment == 'cash';
        const needHitBack = data.delivery.hitBack && data.delivery.hitBackSum != undefined;
        data.delivery.paymentString = paymentIsCash ? "–ù–∞–ª–∏—á–Ω—ã–µ" : "–û–Ω–ª–∞–π–Ω";
        data.delivery.hitBackMessage = needHitBack ? `–ù—É–∂–Ω–∞ —Å–¥–∞—á–∞ —Å ${data.delivery.hitBackSum}—Ä` : ``;
        const sendResult = await mailService.mail(data.delivery.email, subject, emailTemplateName, data).catch(console.error);
        if (sendResult.messageId.length > 0) {
            const delimeter = `\n\n`;
            const messageHeader = `–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!ü§ù`;
            const messageDelivery = `<b>–î–æ—Å—Ç–∞–≤–∏–º —Å—é–¥–∞:</b>\n–£–ª–∏—Ü–∞ –∏ –¥–æ–º: ${data.delivery.street}\n‚Ññ –∫–≤–∞—Ä—Ç–∏—Ä—ã/–æ—Ñ–∏—Å–∞: ${data.delivery.apartment}\n` +
                `–ü–æ–¥—ä–µ–∑–¥: ${data.delivery.entrance}\n–≠—Ç–∞–∂:${data.delivery.level}\n\n<b>–í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n–ò–º—è: ${data.delivery.name}\n` +
                `–¢–µ–ª–µ—Ñ–æ–Ω: ${data.delivery.phone}`;
            let messageOrder = `<b>–ó–∞–∫–∞–∑:</b>\n`;
            data.order.map((item) => {
                let orderItemString = `${item.name}\n${item.count}—à—Ç * ${item.price}—Ä = ${item.totalPrice}—Ä`;
                messageOrder += orderItemString + '\n';
            });
            messageOrder += `\n<b>–û–ø–ª–∞—Ç–∞:</b> ${data.delivery.paymentString}\n`;
            if (needHitBack) messageOrder += `–ù—É–∂–Ω–∞ —Å–¥–∞—á–∞ —Å ${data.delivery.hitBackSum}—Ä\n`;
            messageOrder += `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${data.delivery.comment}`;
            const messageTotalOrder = `–û–±—â–∞—è —Å—É–º–º–∞ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ <b>${data.orderTotalPrice}—Ä</b>. –° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞üëç`;
            try {
                await bot.answerWebAppQuery(queryId, {
                    type: 'article',
                    title: '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω',
                    id: queryId,
                    input_message_content: {
                        message_text: messageHeader + delimeter + messageDelivery + delimeter + messageOrder + delimeter + messageTotalOrder,
                        parse_mode: 'HTML'
                    }
                });
            } catch (e) {

            }
            res.status(200).json({ "result": "OK" });
        } else {
            res.status(500).json({ "errorName": "EmailError", "errorMessage": "Send admin email error" });
        }
    } catch (e) {
        console.log("Error save order", e);
        res.status(500).json({ "errorName": e.name, "errorMessage": e.message });
    }
});

const PORT = process.env.SERVER_PORT;
if (process.env.SERVER_KEY_PATH.length > 0) {
    https
        .createServer(
            {
                key: fs.readFileSync(process.env.SERVER_KEY_PATH),
                cert: fs.readFileSync(process.env.SERVER_CERT_PATH),
            },
            app
        )
        .listen(PORT, function () {
            console.log(`Server listens on PORT=${PORT}`);
        });
} else {
    app.listen(PORT, () => console.log(`Server starter on PORT=${PORT}`));
}